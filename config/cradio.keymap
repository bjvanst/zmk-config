/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NAV 1
#define NUM 2
#define MEDIA 3
#define FUNC 4
#define ZMKL 5

&caps_word{
	continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&sk {
	release-after-ms = <1000>;
};

/ {
	behaviors {        
        //keypress on tap, macros on hold
        brc_t: brace_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BRACE_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&zm_brace>, <&kp>;
        };
        
        brk_t: bracket_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BRACKET_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&zm_bracket>, <&kp>;
        };
        
        prn_t: paren_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "PAREN_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&zm_paren>, <&kp>;
        };
		
        ltgt_t: paren_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LTGT_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&zm_ltgt>, <&kp>;
        };		
        
		//send qu on keypress, q on key hold
        qu_t: qu_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QU_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&zm_qu>;
		};
			
		//Tap Dances
		td_caps: tap_dance_caps {
		    compatible = "zmk,bheavior-tap-dance";
			label = "TAP_DANCE_CAPS";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&caps_word>, <&kp CAPSLOCK>;
		};

	};

	combos {
         #include "combos.dtsi"
	};
    
    macros {  
        #include "macros.dtsi"
    };

    keymap {
        compatible = "zmk,keymap";
                
       	default_layer {
            bindings = <
                &qu_t Q 0       &kp W           &kp F           &kp P           &kp B 					&kp J        	&kp L         	&kp U	       	&kp Y         	&kp QUOT 
                &kp A    	    &kp R           &kp S           &kp T           &kp G 			   		&kp M        	&kp N           &kp E           &kp I           &kp O
                &kp Z           &kp X           &kp C           &kp D           &kp V				    &kp K       	&kp H           &kp CMMA        &kp DOT         &kp QUESTION
																&mo FUNC        &kp SPC  			    &kp BSPC        &mo MEDIA
            >;
		};
        
       	nav_layer {
            bindings = <
                &none           &none           &kp TAB      	&none           &none		           	&none           &none           &kp UP_ARROW    &none           &none 
                &sk LGUI        &sk LALT        &sk LCTRL       &sk LSHIFT      &td_caps    	        &none           &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW &none
                &kp LC(Z)       &kp LC(X) 	    &kp LC(C)       &kp LC(V)       &none 	                &kp INSERT      &kp HOME        &kp PG_UP       &kp PG_DN       &kp END			
																&none           &none 					&kp DEL       	&none
		>;
		};
		
		num_layer {
            bindings = <
                &kp GRAVE		&kp N7        	&kp N8        	&kp N9        	&none    			    &none           &none           &none         &none         &none 
                &kp N0    	    &kp N4        	&kp N5        	&kp N6        	&none			        &td_caps        &sk RSHIFT      &sk RCTRL     &sk RALT      &sk RGUI
                &none       	&kp N1        	&kp N2        	&kp N3        	&kp EQUAL				&none           &kp LC(V)       &kp RC(C)     &kp RC(X)     &kp RC(Z)
																&none        	&kp MINUS  				&none        	&none
		>;
		};	
		
		media_layer {
            bindings = <
                &none      		&none        	&none           &none             &none  				&trans          &trans          &trans        &trans        &trans
                &kp C_PREV      &kp C_VOL_DN    &kp C_VOL_UP    &kp C_NEXT        &none  	    		&trans          &trans          &trans        &trans        &trans 
                &none           &none           &none           &none             &none   				&trans          &trans          &trans        &trans        &trans   
                                                                &kp C_MUTE        &kp C_PLAY_PAUSE  	&trans          &trans 
		>;
		};	
        
        func_layer {
            bindings = <
                &trans        	&trans        	&trans        	&trans        &trans    			    &kp PSCRN           &kp F9      &kp F10       &kp F11       &kp F12 
                &trans        	&trans        	&trans        	&trans        &trans 			        &kp SLCK            &kp F5      &kp F6        &kp F7        &kp F8
                &trans        	&trans        	&trans        	&trans        &trans    			    &kp PAUSE_BREAK     &kp F1      &kp F2        &kp F3        &kp F4
																&trans        &trans  					&trans              &kp K_APP 
		>;
		};

		zmk_layer {
            bindings = <
                &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &none           &bt BT_CLR  			&trans          &trans          &trans        &trans        &trans
                &bootloader     &reset			&none    		&none      		&none  	        		&trans          &trans          &trans        &reset        &bootloader 
                &none           &none           &none           &none           &none   				&trans          &trans          &trans        &trans        &trans   
                                                                &trans  		&trans  				&trans          &trans 
		>;
		};
        
       	hd_neu {
            bindings = <
                &kp W           &kp F           &kp M           &kp P           &kp V 					&kp SLASH      	&kp DOT         &kp Q	       	&kp QUOT        &kp DOUBLE_QUOTES
                &hmp LGUI R    	&hm LALT S      &hm LCTRL N     &hm LSHIFT T    &kp B 			   		&kp CMMA       	&hm RSHIFT A    &hm RCTRL E     &hm RALT I      &hmp RGUI H
                &kp X           &kp C           &kp L           &kp D           &kp G				    &kp MINUS      	&kp U           &kp O           &kp Y         &kp K
																&lt FUNC TAB    &tlt NAV SPC  			&tlt NUM BSPC   &lt MEDIA DEL
            >;
		}; 
	};
};
